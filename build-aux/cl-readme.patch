diff --git a/README b/README
index af87125..cb204fe 100644
--- a/README
+++ b/README
@@ -1,26 +1,21 @@
-Predator and Forester
-=====================
-Predator is a practical tool for checking manipulation of dynamic data
-structures using *separation logic*.  It can be loaded directly into *GCC* as a
-*plug-in*.  This way you can easily analyse C code sources, using the existing
-build system, without any manual preprocessing of them etc.  The analysis itself
-is, however, not ready for complex projects yet.  The plug-in is based on Code
-Listener infrastructure (included).  Although Predator is intended to be as
-portable as GCC is, we support only Linux for now.  You can find the latest news
-on the following project page:
-
-    http://www.fit.vutbr.cz/research/groups/verifit/tools/predator
-
-Forester is an experimental tool for checking manipulation of dynamic data
-structures using *forest automata*.  As in case of Predator, it can be loaded
-directly into *GCC* as a *plug-in* to analyse C code sources.  However, the analysis
-itself is not yet mature enough to be able to verify ordinary programs.  Although
-Forester is intended to be as portable as GCC is, we support only Linux for now.
-You can find the latest news on the following project page:
-
-    http://www.fit.vutbr.cz/research/groups/verifit/tools/forester
-
-Predator, Code Listener, and Forester are licensed as GPLv3+, see COPYING for details.
+Code Listener
+=============
+Code Listener is an easy to use infrastructure for building static analysis
+tools.  Our goal is to wrap the interfaces of existing code parsers and provide
+a unified and well-documented, object-oriented API (Application Programming
+Interface).  The key advantage of our solution is that we allow building of
+analysers capable of handling everything that *GCC* is able to compile (unlike,
+e.g., the CIL infrastructure).  Additionally, there is no need to pre-process
+the sources, neither to change the way the sources are being built.  Hence, we
+make it easy to, e.g., run an analysis on a Linux kernel module or an
+autotools-based project, etc.  Our infrastructure is implemented as a C++
+library that can be used to build an analyser as a GCC *plug-in* (using the
+native GCC plug-in interface).  You can find the latest news on the following
+project page:
+
+    http://www.fit.vutbr.cz/research/groups/verifit/tools/code-listener
+
+Code Listener is licensed as GPLv3+, see COPYING for details.
 
 Building from sources against a local build of GCC [recommended for end users]
 ==============================================================================
@@ -42,8 +37,8 @@ Building from sources against a local build of GCC [recommended for end users]
      - package is usually called 'mpfr'
      - on binary distros you may need also the 'mpfr-devel' sub-package
 
-(2) Install all dependences of Predator and Forester
-----------------------------------------------------
+(2) Install all dependences of Code Listener
+--------------------------------------------
    * CMake 2.8+
      - available at http://www.cmake.org
      - the executable is called 'cmake'
@@ -79,69 +74,28 @@ giving the option '-jN' to 'make', where N is the number of CPU cores plus one
 (a commonly used heuristic, there exist several others).  But first make sure
 that your machine has enough resources for building GCC in parallel.
 
-(4) Build Code Listener, Predator and Forester from sources
------------------------------------------------------------
-The following command builds Code Listener, Predator and Forester from sources:
+(4) Build Code Listener from sources
+------------------------------------
+The following command builds Code Listener from sources:
 
     make
 
 Again, the build can be accelerated using the '-j' option of 'make', as stated
-above.  After a successful build of Predator (or Forester), it is suggested (but
-not required) to run the test-suite shipped with Predator (or Forester) to ensure
-the plug-in works as the authors intended to.  The test-suite for Predator consists
-of more than 200 regression tests that can be run using the following command:
+above.  After a successful build of Code Listener, it is suggested (but not
+required) to run the test-suite shipped with Code Listener to ensure the plug-in
+works as the authors intended to.  The test-suite can be run using the following
+command:
 
     make check
 
-As well as the build, the test-suite can run in parallel in order to boost the
-performance.  Now the '-jN' parameter needs to go to 'ctest' instead of make:
-
-    make check CTEST="ctest -j9"
-
-(5) Prepare environment for running Predator transparently [optional]
----------------------------------------------------------------------
-To employ the Predator plug-in in a build of an arbitrary project fully
-transparently, it is recommended to set certain environment variables.  You can
-use the script register-paths.sh to do this automatically.
-
-    . sl_build/register-paths.sh
-
-Then you can simply use the '-fplugin' option of GCC as documented in the gcc(1)
-man page:
-
-    gcc -fplugin=libsl.so ...
-
-This will show you the available options of the Predator plug-in itself:
-
-    echo please help | gcc -fplugin=libsl.so -fplugin-arg-libsl-help -xc -
-
-
-(6) Prepare environment for running Forester transparently [optional]
----------------------------------------------------------------------
-Analogically to Predator you can also set up the environment for Forester by
-running the following script:
-
-    . fa_build/register-paths.sh
-
-Then you can again use the '-fplugin' option of GCC as documented in the gcc(1)
-man page:
-
-    gcc -fplugin=libfa.so ...
-
-This will show you the available options of the Forester plug-in itself:
-
-    echo please help | gcc -fplugin=libfa.so -fplugin-arg-libfa-help -xc -
 
 Building from sources against the system GCC
 ============================================
 This method requires a build of GCC with plug-in support compiled in (not
-necessarily the system one).  The currently supported version of GCC is 4.7.2
-and the test-suite is guaranteed to fully succeed only against this version of
-GCC.  However, the Predator plug-in itself is known to work with GCC 4.5.x and
-GCC 4.6.x equally well.
-
-You can use the 'switch-host-gcc.sh' script to rebuild Code Listener, Predator,
-and Forester against a GCC build of your choice.  For details, please run
-'switch-host-gcc.sh' without any arguments.  The script needs to be run in the
-same directory as this README is.  If it fails, make sure your environment is
-sane.  Especially check the PATH and LD_LIBRARY_PATH environment variables.
+necessarily the system one).
+
+You can use the 'switch-host-gcc.sh' script to rebuild Code Listener against a
+GCC build of your choice.  For details, please run 'switch-host-gcc.sh' without
+any arguments.  The script needs to be run in the same directory as this README
+is.  If it fails, make sure your environment is sane.  Especially check the PATH
+and LD_LIBRARY_PATH environment variables.
